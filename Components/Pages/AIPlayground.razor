@page "/aiPlayground"
@using System.Text.Json
@using Qb.AI.Models
@using Sklad.Components.Models


<MudPaper>
    <MudText Typo="Typo.h3" Class="mb-3">Generowanie tekstu z Chat GPT oraz jego analiza narzędziami AZURE</MudText>
    <MudSelect T="string" class="mt-3" Label="Dostępne Prompty:" @bind-Value="_userPrompt">
        @foreach (var item in _avaivablePrompts)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>

    <MudTextField T="string" Label="Twoje zapytanie" @bind-Value="_userPrompt" Lines="3" Class="mt-3" Placeholder="Co chciałbyś wiedzieć?"/>
    
    <MudSelect T="string" class="mt-3" Style="max-width: 6%" Label="Wybierz model:" @bind-Value="_model">
        @foreach (var item in _avaivableModels)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" @onclick="GenerateText"> Generuj </MudButton>
</MudPaper>

@if(_isLoadingGpt)
{
    <p class="mt-3">Generowanie tekstu...</p>
   
}
else if (!string.IsNullOrWhiteSpace(_generatedTextGpt))
{
    <MudPaper>
        <MudText Typo="Typo.h5" Class="mt-3 mb-3">Wygenerowany tekst: </MudText>
                <MudText Typo="Typo.body1"> @_generatedTextGpt </MudText>
    </MudPaper>
}

@if(_isLoadingAzure)
{
    <p class="mt-3">Analizowanie tekstu...</p>

}
else if (_showResult)
{
    <MudPaper>
        <MudText Typo="Typo.h5" Class="mt-3 mb-3">Wynik analizy AZURE wygenerowanego tekstu: </MudText>
        <MudText Typo="Typo.h6" Class="mt-7 mb-7">Sentyment: @_sentimentResult </MudText>
        <MudText>Kluczowe frazy:</MudText>
        <MudList T="string">
            @foreach (var keyPhrase in _keyPhrases)
            {
                <MudListItem>@keyPhrase</MudListItem>
            }
        </MudList>
    </MudPaper>
}


@code {
    
    private string _userPrompt = "";
    private bool _isLoadingGpt;
    private string _generatedTextGpt = "";
    private List<string> _avaivablePrompts = new();
    private string _model = "gpt-4";
    private List<string> _avaivableModels = new() {"gpt-4", "gpt-4o-mini", "gpt-4o", "o1-mini", "o3-mini", "o1" };
    
    
    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }
    
    [Inject]
    public IWebHostEnvironment Env { get; set; }

    protected override void OnInitialized()
    {
        var webRootPath = Env.WebRootPath;
        var csvPath = Path.Combine(webRootPath, "data", "prompts.csv");
        var lines = File.ReadAllLines(csvPath);

        for (int i = 1; i < lines.Length; i++)
        {
            var line = lines[i].Trim().Trim('"');
            if (!string.IsNullOrWhiteSpace(line)) _avaivablePrompts.Add(line);
        }

        
    }

    private async Task GenerateText()
    {
        if (string.IsNullOrWhiteSpace(_userPrompt))
        return;
            
        _isLoadingGpt = true;
        _generatedTextGpt = await AskOpenAi(_userPrompt);
        
        _isLoadingGpt = false;
        
        await AnalyzeText();
        
    }

    private async Task<string> AskOpenAi(string prompt)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("OpenAI");
            
            var requestBody = new
            {
                model = _model,
                messages = new[]
                {
                    new
                    {
                        role = "system",
                        content = "Jesstes asystente, który odpowiada na pytania"
                    },
                    new
                    {
                        role = "user",
                        content = prompt
                    }
                },
                max_tokens = 500
                
            };
            
           using var response = await client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody);
           
           if(!response.IsSuccessStatusCode)
           {
               return "Błąd podczas generowania tekstu";
           }
           
              var jsonResponse = await response.Content.ReadFromJsonAsync<ChatCompletionResponse>();

              var answer = jsonResponse?.Choices?.FirstOrDefault()?.Message?.Content.Trim();
              
              return answer;
        }
        catch (Exception e)
        {
          
            return $"Error: {e.Message}";
        }
    }
    
    
    
    private string _userText;
    private bool _isLoadingAzure;
    private bool _showResult;
    private string _sentimentResult = "";
    private List<string> _keyPhrases = new();

    [Inject]
    public IHttpClientFactory HttpFactory { get; set; }

    private async Task AnalyzeText()
    {
        if (string.IsNullOrWhiteSpace(_generatedTextGpt))
            return;

        _isLoadingAzure = true;
        _showResult = false;
        _sentimentResult = "";
        _keyPhrases.Clear();

        var sentiment = await AnalyzeSentiment(_generatedTextGpt);
        var keyPhrases = await ExtractKeyPhrases(_generatedTextGpt);

        
        _sentimentResult = sentiment;
        _keyPhrases = keyPhrases;
        _isLoadingAzure = false;
        _showResult = true;
    }

    private async Task<string> AnalyzeSentiment(string text)
    {
        try
        {
            var requestBody = new AnalyzeTextRequest
                {
                    Kind = "SentimentAnalysis",
                    AnalysisInput = new AnalysisInput
                    {
                        Documents = new List<AnalysisDocument>
                    {
                        new AnalysisDocument
                        {
                            Id = "1",
                            Language = "pl",
                            Text = text
                        }
                    }
                    },
                    Parameters = new Dictionary<string, object>
                {
                    { "modelVersion", "latest" },
                    { "loggingOptOut", false }
                }
                };

            var client = HttpFactory.CreateClient("AzureAI");

            var endpoint = "language/:analyze-text?api-version=2024-11-01";

            var response = await client.PostAsJsonAsync(endpoint, requestBody);
            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();

            var analyzeResponse = JsonSerializer.Deserialize<AnalyzeTextResponse>(responseString);

            var doc = analyzeResponse?.Results?.Documents?.FirstOrDefault();

            return doc?.Sentiment ?? "unknown";
        }
        catch (Exception ex)
        {
            return $"Błąd: {ex.Message}";
        }
    }

    private async Task<List<string>> ExtractKeyPhrases(string text)
    {
        try
        {
            var requestBody = new AnalyzeTextRequest
            {
                Kind = "KeyPhraseExtraction",
                AnalysisInput = new AnalysisInput
                {
                    Documents = new List<AnalysisDocument>
                    {
                        new AnalysisDocument
                        {
                            Id = "1",
                            Language = "pl",
                            Text = text
                        }
                    }
                },
                Parameters = new Dictionary<string, object>
                {
                    { "modelVersion", "latest" },
                    { "loggingOptOut", false }
                }
            };

            var client = HttpFactory.CreateClient("AzureAI");

            var endpoint = "language/:analyze-text?api-version=2024-11-01";

            var response = await client.PostAsJsonAsync(endpoint, requestBody);
            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();

            var analyzeResponse = JsonSerializer.Deserialize<AnalyzeTextResponse>(responseString);

            var doc = analyzeResponse?.Results?.Documents?[0];

            return doc?.KeyPhrases ?? new List<string>();
        }
        catch (Exception ex)
        {
            return new List<string> { $"Błąd: {ex.Message}" };
        }
    }
    
    

}