@page "/openai"
@using Sklad.Components.Models


<MudPaper>
    <MudText Typo="Typo.h3" Class="mb-3">Generowanie tekstu z Chat GPT</MudText>
    <MudText Typo="Typo.h6">Wybierz prompt:</MudText>
    <MudSelect T="string" class="mt-3" Label="Dostępne Prompty:" @bind-Value="_userPrompt">
        @foreach (var item in _avaivablePrompts)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>

    <MudTextField T="string" Label="Twoje zapytanie" @bind-Value="_userPrompt" Lines="3" Class="mt-3" Placeholder="Co chciałbyś wiedzieć?"/>
    
    <MudSelect T="string" class="mt-3" Style="max-width: 6%" Label="Wybierz model:" @bind-Value="_model">
        @foreach (var item in _avaivableModels)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" @onclick="GenerateText"> Generuj </MudButton>
</MudPaper>

@if(_isLoading)
{
    <p class="mt-3">Generowanie tekstu...</p>
   
}
else if (!string.IsNullOrWhiteSpace(_generatedText))
{
    <MudPaper>
        <MudText Typo="Typo.h6">Wynik: </MudText>
                <MudText Typo="Typo.body1"> @_generatedText </MudText>
    </MudPaper>
}


@code {
    
    private string _userPrompt = "";
    private bool _isLoading;
    private string _generatedText = "";
    private List<string> _avaivablePrompts = new();
    private string _model = "gpt-4";
    private List<string> _avaivableModels = new() {"gpt-4", "gpt-4o-mini", "gpt-4o", "o1-mini", "o3-mini", "o1" };
    
    
    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }
    
    [Inject]
    public IWebHostEnvironment Env { get; set; }

    protected override void OnInitialized()
    {
        var webRootPath = Env.WebRootPath;
        var csvPath = Path.Combine(webRootPath, "data", "prompts.csv");
        var lines = File.ReadAllLines(csvPath);

        for (int i = 1; i < lines.Length; i++)
        {
            var line = lines[i].Trim().Trim('"');
            if (!string.IsNullOrWhiteSpace(line)) _avaivablePrompts.Add(line);
        }
    }

    private async Task GenerateText()
    {
        if (string.IsNullOrWhiteSpace(_userPrompt))
        return;
            
        _isLoading = true;
        _generatedText = await AskOpenAi(_userPrompt);
        
        _isLoading = false;
    }

    private async Task<string> AskOpenAi(string prompt)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("OpenAI");
            
            var requestBody = new
            {
                model = _model,
                messages = new[]
                {
                    new
                    {
                        role = "system",
                        content = "Jesstes asystente, który odpowiada na pytania"
                    },
                    new
                    {
                        role = "user",
                        content = prompt
                    }
                },
                max_tokens = 500
                
            };
            
           using var response = await client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody);
           
           if(!response.IsSuccessStatusCode)
           {
               return "Błąd podczas generowania tekstu";
           }
           
              var jsonResponse = await response.Content.ReadFromJsonAsync<ChatCompletionResponse>();

              var answer = jsonResponse?.Choices?.FirstOrDefault()?.Message?.Content.Trim();
              
              return answer;
        }
        catch (Exception e)
        {
          
            return $"Error: {e.Message}";
        }
    }

}